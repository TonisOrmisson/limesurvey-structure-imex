name: Tests

on:
  push:
  pull_request:

jobs:
  tests:
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix:
        operating-system: ['ubuntu-latest']
        php-versions: ['8.1','8.2','8.3','8.4']
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: limesurvey_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -ptestpassword" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-versions }}
        extensions: mbstring, xml, ctype, json, curl, dom, fileinfo, gd, iconv, intl, mbstring, openssl, pcre, pdo, pdo_mysql, tokenizer, zip
        coverage: xdebug

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer-ci.json') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies (with LimeSurvey)
      run: COMPOSER=composer-ci.json composer install --prefer-dist --no-progress

    - name: Validate LimeSurvey installation
      run: |
        echo "=== Validating LimeSurvey installation ==="
        
        # Check if vendor directory exists
        if [ ! -d "vendor/limesurvey/limesurvey" ]; then
          echo "ERROR: vendor/limesurvey/limesurvey directory not found!"
          exit 1
        fi
        
        # List contents of LimeSurvey directory
        echo "LimeSurvey directory contents:"
        ls -la vendor/limesurvey/limesurvey/ || echo "Failed to list directory"
        
        # Check for essential directories
        echo -e "\nChecking essential directories:"
        for dir in application installer assets upload; do
          if [ -d "vendor/limesurvey/limesurvey/$dir" ]; then
            echo "✓ $dir directory exists"
          else
            echo "✗ $dir directory missing!"
          fi
        done
        
        # Check for installer SQL file
        echo -e "\nChecking for installer SQL files:"
        if [ -f "vendor/limesurvey/limesurvey/installer/create-database.php" ]; then
          echo "✓ Found installer/create-database.php"
        else
          echo "✗ installer/create-database.php missing!"
        fi
        
        # Find SQL files
        echo -e "\nSearching for SQL files:"
        find vendor/limesurvey/limesurvey -name "*.sql" -type f | head -10 || echo "No SQL files found"
        
        # Check application/config
        echo -e "\nChecking application/config:"
        ls -la vendor/limesurvey/limesurvey/application/config/ | head -10 || echo "Config directory missing"
        
        # Count total files
        echo -e "\nTotal files in LimeSurvey:"
        FILE_COUNT=$(find vendor/limesurvey/limesurvey -type f | wc -l)
        echo $FILE_COUNT
        
        # Fail if too few files (indicating incomplete installation)
        if [ $FILE_COUNT -lt 1000 ]; then
          echo "ERROR: LimeSurvey installation appears incomplete (only $FILE_COUNT files found)"
          echo "Expected at least 1000 files for a complete installation"
          exit 1
        fi

    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" --silent; do
          sleep 1
        done

    - name: Create separate LimeSurvey database for vendor installation
      env:
        DB_HOST: 127.0.0.1
        DB_USER: root
        DB_PASSWORD: testpassword
      run: |
        mysql -h127.0.0.1 -uroot -ptestpassword -e "CREATE DATABASE IF NOT EXISTS limesurvey_vendor_test;"
        echo "Database limesurvey_vendor_test created (tables will be created by installer)"

    - name: Setup LimeSurvey vendor installation
      env:
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_NAME: limesurvey_vendor_test
        DB_USER: root
        DB_PASSWORD: testpassword
      run: |
        # Verify LimeSurvey vendor installation
        ls -la vendor/limesurvey/limesurvey/
        
        # Create LimeSurvey config for vendor installation
        cd vendor/limesurvey/limesurvey
        
        # Find the correct config sample file
        if [ -f "application/config/config-sample-mysql.php" ]; then
          cp application/config/config-sample-mysql.php application/config/config.php
        elif [ -f "application/config/config.sample.php" ]; then
          cp application/config/config.sample.php application/config/config.php
        else
          echo "Available config files:"
          ls -la application/config/
          exit 1
        fi
        
        # Update database configuration in config.php
        # First, let's see what's in the config file
        echo "Original config.php database section:"
        grep -A5 "'db'" application/config/config.php || echo "db section not found"
        
        # Update the connection string, username, and password
        sed -i "s/'connectionString' => '[^']*'/'connectionString' => 'mysql:host=127.0.0.1;port=3306;dbname=limesurvey_vendor_test;'/g" application/config/config.php
        sed -i "s/'username' => '[^']*'/'username' => 'root'/g" application/config/config.php
        sed -i "s/'password' => '[^']*'/'password' => 'testpassword'/g" application/config/config.php
        
        # Also update tablePrefix if needed
        sed -i "s/'tablePrefix' => '[^']*'/'tablePrefix' => 'lime_'/g" application/config/config.php
        
        # Verify config was updated
        echo "Updated config.php database section:"
        grep -A5 "'db'" application/config/config.php || echo "db section not found"
        
        # Test database connection before installer
        echo "Testing database connection..."
        php -r "
        \$dsn = 'mysql:host=127.0.0.1;port=3306;dbname=limesurvey_vendor_test';
        try {
            \$pdo = new PDO(\$dsn, 'root', 'testpassword');
            echo 'Database connection successful!' . PHP_EOL;
            \$pdo = null;
        } catch (PDOException \$e) {
            echo 'Database connection failed: ' . \$e->getMessage() . PHP_EOL;
            exit(1);
        }
        "
        
        # Check if create-database.php exists
        if [ ! -f "installer/create-database.php" ]; then
          echo "ERROR: installer/create-database.php not found!"
          echo "Current directory: $(pwd)"
          echo "Installer contents:"
          ls -la installer/
          exit 1
        fi
        
        # Run LimeSurvey CLI installer
        echo "Running LimeSurvey installer..."
        php application/commands/console.php install admin admin admin@example.com admin || {
          echo "Installation failed!"
          echo "Checking database tables:"
          mysql -h127.0.0.1 -uroot -ptestpassword -e "USE limesurvey_vendor_test; SHOW TABLES;"
          exit 1
        }
        
        # Verify installation
        echo "Verifying installation..."
        mysql -h127.0.0.1 -uroot -ptestpassword -e "USE limesurvey_vendor_test; SELECT COUNT(*) as table_count FROM information_schema.tables WHERE table_schema = 'limesurvey_vendor_test';"
        
        # Install our plugin in the vendor LimeSurvey installation
        cd ../../../
        echo "Creating plugin directory in vendor LimeSurvey"
        mkdir -p vendor/limesurvey/limesurvey/upload/plugins/StructureImEx
        
        # Copy our plugin files (excluding vendor and tests to avoid conflicts)
        cp -r src vendor/limesurvey/limesurvey/upload/plugins/StructureImEx/
        cp StructureImEx.php vendor/limesurvey/limesurvey/upload/plugins/StructureImEx/
        cp config.xml vendor/limesurvey/limesurvey/upload/plugins/StructureImEx/
        cp composer.json vendor/limesurvey/limesurvey/upload/plugins/StructureImEx/
        
        # Install plugin dependencies in vendor LimeSurvey
        cd vendor/limesurvey/limesurvey/upload/plugins/StructureImEx
        composer install --no-dev --prefer-dist
        
        echo "Plugin installed in vendor LimeSurvey"

    - name: Register plugin in database
      env:
        LIMESURVEY_VENDOR_PATH: vendor/limesurvey/limesurvey
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_NAME: limesurvey_vendor_test
        DB_USER: root
        DB_PASSWORD: testpassword
      run: |
        # Test database connection first
        echo "Testing database connection..."
        mysql -h127.0.0.1 -uroot -ptestpassword -e "SELECT 1;" limesurvey_vendor_test || {
          echo "ERROR: Cannot connect to database limesurvey_vendor_test"
          echo "Available databases:"
          mysql -h127.0.0.1 -uroot -ptestpassword -e "SHOW DATABASES;"
          exit 1
        }
        
        # Register the plugin in the LimeSurvey database
        cd /home/runner/work/limesurvey-structure-imex/limesurvey-structure-imex
        php tests/simple-plugin-installer.php || {
          echo "ERROR: Plugin registration failed"
          exit 1
        }

    - name: Setup test environment file
      run: |
        # Create tests/.env for CI environment
        cat > tests/.env << EOF
        # CI Environment Configuration
        DB_HOST=127.0.0.1
        DB_PORT=3306
        DB_NAME=limesurvey_vendor_test
        DB_USER=root
        DB_PASSWORD=testpassword
        CI=true
        EOF
        
        # Verify .env file
        cat tests/.env

    - name: Run tests with coverage
      env:
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_NAME: limesurvey_vendor_test
        DB_USER: root
        DB_PASSWORD: testpassword
        CI: true
        LIMESURVEY_VENDOR_PATH: vendor/limesurvey/limesurvey
      run: |
        # Create coverage directory
        mkdir -p coverage
        
        # Run tests with coverage on all PHP versions
        echo "Running tests with coverage collection on PHP ${{ matrix.php-versions }}..."
        vendor/bin/phpunit \
          --coverage-clover=coverage/clover.xml \
          --coverage-cobertura=coverage/cobertura.xml \
          --coverage-xml=coverage/coverage-xml \
          --coverage-html=coverage/html \
          --log-junit=coverage/junit.xml \
          --coverage-text \
          --verbose

    - name: Generate coverage reports
      env:
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_NAME: limesurvey_vendor_test
        DB_USER: root
        DB_PASSWORD: testpassword
        CI: true
        LIMESURVEY_VENDOR_PATH: vendor/limesurvey/limesurvey
      run: |
        echo "=== Coverage Summary ==="
        vendor/bin/phpunit --coverage-text --colors=never | grep -A 20 "Code Coverage Report"
        
        echo "=== Detailed Coverage by Test Suite ==="
        echo "Functional tests coverage:"
        vendor/bin/phpunit --testsuite=functional --coverage-text --colors=never | grep -A 10 "Code Coverage Report" || echo "Functional coverage completed"
        
        echo "Unit tests coverage:"
        vendor/bin/phpunit --testsuite=unit --coverage-text --colors=never | grep -A 10 "Code Coverage Report" || echo "Unit coverage completed"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/clover.xml,./coverage/cobertura.xml
        directory: ./coverage/
        flags: unittests,functional,php-${{ matrix.php-versions }}
        name: codecov-php-${{ matrix.php-versions }}
        fail_ci_if_error: false
        verbose: true

    - name: Archive coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-php-${{ matrix.php-versions }}
        path: |
          coverage/
          !coverage/coverage-xml
        retention-days: 30

    - name: Check coverage thresholds
      run: |
        echo "=== Coverage Threshold Check ==="
        
        # Extract coverage percentage from clover.xml
        if [ -f "coverage/clover.xml" ]; then
          COVERAGE=$(php -r "
            \$xml = simplexml_load_file('coverage/clover.xml');
            \$metrics = \$xml->project->metrics;
            \$statements = (int)\$metrics['statements'];
            \$coveredstatements = (int)\$metrics['coveredstatements'];
            if (\$statements > 0) {
              \$percentage = (\$coveredstatements / \$statements) * 100;
              echo number_format(\$percentage, 2);
            } else {
              echo '0';
            }
          ")
          
          echo "Current coverage: ${COVERAGE}%"
          
          # Set minimum coverage threshold
          MIN_COVERAGE=80
          
          # Compare coverage (using bc for floating point comparison)
          if (( $(echo "$COVERAGE >= $MIN_COVERAGE" | bc -l) )); then
            echo "✅ Coverage check passed: ${COVERAGE}% >= ${MIN_COVERAGE}%"
          else
            echo "❌ Coverage check failed: ${COVERAGE}% < ${MIN_COVERAGE}%"
            echo "Please add more tests to improve coverage."
            exit 1
          fi
        else
          echo "⚠️  No coverage report found, skipping threshold check"
        fi

    - name: Run PHPStan code analysis
      run: vendor/bin/phpstan analyse src --level=5
